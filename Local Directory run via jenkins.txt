// Must Be Run This command Before Run Jenkins Pipeline  "sudo cp -r /home/lenovo/Downloads/Web_Test_Automation-main /var/lib/jenkins/Web_Test_Automation-main"

pipeline {
    agent any
    
    environment {
        SLACK_CHANNEL = 'C07C89YJY92'  // Your Slack channel ID
    }
    
    tools {
        maven 'Maven'  // Replace with the name you used in Global Tool Configuration
    }
    
    stages {
        stage('Setup') {
            steps {
                // Copy project directory to /tmp and check contents
                sh '''
                    echo "Copying project to /tmp"
                    cp -r /var/lib/jenkins/Web_Test_Automation-main /tmp/
                    echo "Contents of /tmp/Web_Test_Automation-main:"
                    ls -al /tmp/Web_Test_Automation-main/Web_Test_Automation-main
                '''
            }
        }
        stage('Build') {
            steps {
                dir('/tmp/Web_Test_Automation-main/Web_Test_Automation-main') {
                    script {
                        // Ensure the file exists and print directory structure for debugging
                        sh 'ls -al src/test/resources || echo "src/test/resources not found"'
                        sh 'chmod 777 src/test/resources/chromedriver_linux || echo "chromedriver_linux not found"'
                    }
                    sh 'mvn clean'
                }
            }
        }
        stage('Test') {
            steps {
                dir('/tmp/Web_Test_Automation-main/Web_Test_Automation-main') {
                    script {
                        def startTime = new Date()
                        def startDateString = startTime.format("yyyy-MM-dd")
                        def startTimeString = startTime.format("HH:mm:ss")
                        
                        echo "Start Date: ${startDateString}"
                        echo "Start Time: ${startTimeString}"
                        
                        def testResults = runTests()
                        
                        // Extract test summary information
                        def totalTests = testResults.totalTests
                        def failures = testResults.failures
                        def errors = testResults.errors
                        def skipped = testResults.skipped
                        def elapsed = testResults.elapsed
                        
                        // Print summary to Jenkins console
                        echo "Testing Summary:\nTotal Tests: ${totalTests}\nFailures: ${failures}\nErrors: ${errors}\nSkipped: ${skipped}\nElapsed: ${elapsed}"
                        
                        // Send Slack notification with summary
                        slackSend (
                            channel: "${env.SLACK_CHANNEL}",
                            color: failures > 0 || errors > 0 ? 'danger' : 'good',
                            attachments: [
                                [
                                    fallback: "Testing Summary",
                                    text: "Testing Results:\nStart Date: ${startDateString}\nStart Time: ${startTimeString}\nTotal Tests: ${totalTests}\nFailures: ${failures}\nErrors: ${errors}\nSkipped: ${skipped}\nTime Elapsed: ${elapsed}",
                                ]
                            ]
                        )
                    }
                }
            }
        }
        stage('Generate Allure Report') {
            steps {
                dir('/tmp/Web_Test_Automation-main/Web_Test_Automation-main') {
                    allure([
                        includeProperties: false,
                        jdk: '',
                        results: [[path: 'target/allure-results']]
                    ])
                }
            }
        }
    }
}

def runTests() {
    def mvnHome = tool 'Maven'
    def mvnCMD = "${mvnHome}/bin/mvn"
    
    def testOutput = sh(
        script: "${mvnCMD} test",
        returnStdout: true
    ).trim()
    
    // Parse test results
    def summary = testOutput =~ /Tests run: (\d+), Failures: (\d+), Errors: (\d+), Skipped: (\d+), Time elapsed: ([\d\.]+ [smh]+) - in TestSuite/
    
    def totalTests = summary[0][1] as int
    def failures = summary[0][2] as int
    def errors = summary[0][3] as int
    def skipped = summary[0][4] as int
    def elapsed = summary[0][5]
    
    return [totalTests: totalTests, failures: failures, errors: errors, skipped: skipped, elapsed: elapsed]
}
